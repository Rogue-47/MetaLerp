#it is advised that you edit DEFINED_MACROS for advanced builds of the lib 
#(using macros that tweak the lib's behavior, but are not included natively in the targets below)
#instead of defining macros in your source code, because it could get chaotic ~ especially with the lib's heterogenuous architecture
#which requires some of the macros to be defined in both gcc and nvcc compilations (like the fast/release configurations or not specifying them (the assertion configuration which is the default))
#or the native data type specification of the lib (e.g. f32 or f64, etc.)
#many other configuration macros (most are found in metalerp/core/include/headers/commons.h) need also the same procedure,
#so just to be safe just add any macro you wish to the DEFINED_MACROS Variable.

MAKEFLAGS += -s
export METALERP_NATIVE=1
#recommended to configure the 7 following variables below
MAIN_FILE = main.c
SOURCE_FILES := 

#final output program name for any lib-based build
OUT_PROG_DEFAULT := 

#final output program name for development builds
DEV_OUT_DEFAULT := 

MACRO_DEF_ARGS := 


LOCAL_LIBS_PATH := /usr/local/lib

#this is normally for things like copying the shared library to the system's library path on linux, or doing extra processing on the shared lib file etc.
EXTRA_SHARED_LIB_ROUTINES = sudo cp $(LIB_DIR)/$(SHARED_LIB_OUT) $(LOCAL_LIBS_PATH)
###############################################################################################

LIB_NAME :=metalerp

#make some of the below variables OS-configurable later on for Windows

CC = gcc
CUDA_PATH := /usr/local/cuda
CUDACC := $(CUDA_PATH)/bin/nvcc

LIB_LINK_ARGS := -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm -lgomp

#configure metalerp's macro interface through this variable (note: as of the current version - the macro interface is a little messy and needs documentation, and some of it is a little under-tested)


#specific arguments passed to the initializations.c source file's compilation in the lib-making targets
LIB_INIT_C_ARGS := -DMETALERP_INTERFACE_LIBMODE

SHARED_LIB_EXTENSION =.so
STATIC_LIB_EXTENSION =.a

#won't hold the lib files by default, but will hold any object files generated by the lib
OBJ_DIR =./object_bin
LIB_DIR =./lib



SHARED_LIB_OUT :=lib$(LIB_NAME)$(SHARED_LIB_EXTENSION)
STATIC_LIB_OUT :=lib$(LIB_NAME)$(STATIC_LIB_EXTENSION)

CC_ARGS = -Ofast -ffast-math -fno-math-errno -mfma -funroll-loops -falign-functions=64 -fprefetch-loop-arrays -march=native -mtune=native -mavx -mavx2 -mf16c -msse4.2 -flto -fopenmp

CUDACC_ARGS = -O3 -use_fast_math -Wno-deprecated-gpu-targets -Xptxas="-O3 --disable-warnings" \
-Xcompiler="-Ofast -ffast-math -fno-math-errno -mfma -funroll-loops -falign-functions=64 -fprefetch-loop-arrays -march=native -mtune=native -mavx -mavx2 -mf16c -msse4.2" \
-gencode arch=compute_61,code=sm_61 -gencode arch=compute_75,code=sm_75 -gencode arch=compute_86,code=sm_86 -gencode arch=compute_86,code=compute_86 -gencode arch=compute_61,code=compute_61

BIN_STRIPPING_CALL = strip --strip-unneeded



#run will be the target that compiles your program files always
#first targets (starting with f32 or f64) produce a shared lib, targets starting with static produce a static lib archive
#dev targets are for compiling the main program and the whole lib together (useful if you're constantly changing the library's code) 

.PHONY: run \
    default run clean \
    f32 f32_release f32_fast \
    f64 f64_release f64_fast \
    static_f32 static_f32_release static_f32_fast \
    static_f64 static_f64_release static_f64_fast \
    dev_f32 dev_f32_release dev_f32_fast \
    dev_f64 dev_f64_release dev_f64_fast

RUN_FILE = compile_main.sh
BIN_DIR = ./bin

OUT_PROG_DEFAULT := 


run: $(BIN_DIR)/$(RUN_FILE)
	$(BIN_DIR)/$(RUN_FILE)

ifeq ($(strip $(OUT_PROG_DEFAULT)),)
OUT_PROG_DEFAULT := main
endif

ifeq ($(strip $(DEV_OUT_DEFAULT)),)
DEV_OUT_DEFAULT := dev_main
endif


#shared

f32: LIB_LINK_ARGS += -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm
f32: CUDACC_ARGS += --compiler-options '-fPIC'
f32: CC_ARGS += -fPIC
f32:
	-rm -f $(LIB_DIR)/$(STATIC_LIB_OUT) 
	make create

	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	$(CUDACC) -shared -o $(LIB_DIR)/$(SHARED_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o $(LIB_LINK_ARGS)
	$(BIN_STRIPPING_CALL) $(LIB_DIR)/$(SHARED_LIB_OUT)
	$(EXTRA_SHARED_LIB_ROUTINES)
	echo "build successfully produced $(LIB_DIR)/$(SHARED_LIB_OUT) library."
	printf "#last build: shared_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

f32_release: LIB_LINK_ARGS += -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm
f32_release: MACRO_DEF_ARGS += -DMETALERP_RELEASE
f32_release: CUDACC_ARGS += --compiler-options '-fPIC'
f32_release: CC_ARGS += -fPIC
f32_release:
	-rm -f $(LIB_DIR)/$(STATIC_LIB_OUT)
	make create

	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	$(CUDACC) -shared -o $(LIB_DIR)/$(SHARED_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o $(LIB_LINK_ARGS)
	$(BIN_STRIPPING_CALL) $(LIB_DIR)/$(SHARED_LIB_OUT)
	$(EXTRA_SHARED_LIB_ROUTINES)
	echo "build successfully produced $(LIB_DIR)/$(SHARED_LIB_OUT) library."
	printf "#last build: shared_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

f32_fast: LIB_LINK_ARGS += -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm
f32_fast: MACRO_DEF_ARGS += -DMETALERP_FAST
f32_fast: CUDACC_ARGS += --compiler-options '-fPIC'
f32_fast: CC_ARGS += -fPIC
f32_fast:
	-rm -f $(LIB_DIR)/$(STATIC_LIB_OUT)
	make create
	
	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	$(CUDACC) -shared -o $(LIB_DIR)/$(SHARED_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o $(LIB_LINK_ARGS)
	$(BIN_STRIPPING_CALL) $(LIB_DIR)/$(SHARED_LIB_OUT)
	$(EXTRA_SHARED_LIB_ROUTINES)
	echo "build successfully produced $(LIB_DIR)/$(SHARED_LIB_OUT) library."
	printf "#last build: shared_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

f64: LIB_LINK_ARGS += -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm
f64: MACRO_DEF_ARGS += -DTYPE_FLOAT64
f64: CUDACC_ARGS += --compiler-options '-fPIC'
f64: CC_ARGS += -fPIC
f64:
	-rm -f $(LIB_DIR)/$(STATIC_LIB_OUT)
	make create

	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	$(CUDACC) -shared -o $(LIB_DIR)/$(SHARED_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o $(LIB_LINK_ARGS)
	$(BIN_STRIPPING_CALL) $(LIB_DIR)/$(SHARED_LIB_OUT)
	$(EXTRA_SHARED_LIB_ROUTINES)
	echo "build successfully produced $(LIB_DIR)/$(SHARED_LIB_OUT) library."
	printf "#last build: shared_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)


f64_release: LIB_LINK_ARGS += -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm
f64_release: MACRO_DEF_ARGS += -DMETALERP_RELEASE -DTYPE_FLOAT64
f64_release: CUDACC_ARGS += --compiler-options '-fPIC'
f64_release: CC_ARGS += -fPIC
f64_release:
	-rm -f $(LIB_DIR)/$(STATIC_LIB_OUT)
	make create

	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	$(CUDACC) -shared -o $(LIB_DIR)/$(SHARED_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o $(LIB_LINK_ARGS)
	$(BIN_STRIPPING_CALL) $(LIB_DIR)/$(SHARED_LIB_OUT)
	$(EXTRA_SHARED_LIB_ROUTINES)
	echo "build successfully produced $(LIB_DIR)/$(SHARED_LIB_OUT) library."
	printf "#last build: shared_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)


f64_fast: LIB_LINK_ARGS += -L/usr/local/cuda/lib64 -lcudart -lcudadevrt -lm
f64_fast: MACRO_DEF_ARGS += -DMETALERP_FAST -DTYPE_FLOAT64
f64_fast: CUDACC_ARGS += --compiler-options '-fPIC'
f64_fast: CC_ARGS += -fPIC
f64_fast:
	-rm -f $(LIB_DIR)/$(STATIC_LIB_OUT)
	make create

	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	$(CUDACC) -shared -o $(LIB_DIR)/$(SHARED_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o $(LIB_LINK_ARGS)
	$(BIN_STRIPPING_CALL) $(LIB_DIR)/$(SHARED_LIB_OUT)
	$(EXTRA_SHARED_LIB_ROUTINES)
	echo "build successfully produced $(LIB_DIR)/$(SHARED_LIB_OUT) library."
	printf "#last build: shared_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)


#static

static_f32:
	-rm -f $(LIB_DIR)/$(SHARED_LIB_OUT)
	make create

	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	ar rcs $(LIB_DIR)/$(STATIC_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o
	echo "build successfully produced $(LIB_DIR)/$(STATIC_LIB_OUT) library."

	printf "#last build: static_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME) $(LIB_LINK_ARGS)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)
	

static_f32_release: MACRO_DEF_ARGS += -DMETALERP_RELEASE
static_f32_release:
	-rm -f $(LIB_DIR)/$(SHARED_LIB_OUT)
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	ar rcs $(LIB_DIR)/$(STATIC_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o
	echo "build successfully produced $(LIB_DIR)/$(STATIC_LIB_OUT) library."

	printf "#last build: static_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME) $(LIB_LINK_ARGS)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

static_f32_fast: MACRO_DEF_ARGS += -DMETALERP_FAST
static_f32_fast:
	-rm -f $(LIB_DIR)/$(SHARED_LIB_OUT)
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	ar rcs $(LIB_DIR)/$(STATIC_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o
	echo "build successfully produced $(LIB_DIR)/$(STATIC_LIB_OUT) library."

	printf "#last build: static_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME) $(LIB_LINK_ARGS)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

static_f64: MACRO_DEF_ARGS += -DTYPE_FLOAT64
static_f64:
	-rm -f $(LIB_DIR)/$(SHARED_LIB_OUT)
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	ar rcs $(LIB_DIR)/$(STATIC_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o
	echo "build successfully produced $(LIB_DIR)/$(STATIC_LIB_OUT) library."

	printf "#last build: static_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME) $(LIB_LINK_ARGS)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)
	

static_f64_release: MACRO_DEF_ARGS += -DMETALERP_RELEASE -DTYPE_FLOAT64
static_f64_release:
	-rm -f $(LIB_DIR)/$(SHARED_LIB_OUT)
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	ar rcs $(LIB_DIR)/$(STATIC_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o
	echo "build successfully produced $(LIB_DIR)/$(STATIC_LIB_OUT) library."

	printf "#last build: static_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME) $(LIB_LINK_ARGS)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

static_f64_fast: MACRO_DEF_ARGS += -DMETALERP_FAST -DTYPE_FLOAT64
static_f64_fast:
	-rm -f $(LIB_DIR)/$(SHARED_LIB_OUT)
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/metalerp.h at the top of the main file, and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/metalerp_cuda_runtime.o metalerp/core/sources/initializations.cu
	$(CC) $(LIB_INIT_C_ARGS) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/metalerp_runtime.o metalerp/core/sources/initializations.c
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -c -o $(OBJ_DIR)/ext_init.o metalerp/core/sources/externals/externals_init.c
	ar rcs $(LIB_DIR)/$(STATIC_LIB_OUT) $(OBJ_DIR)/metalerp_runtime.o $(OBJ_DIR)/metalerp_cuda_runtime.o $(OBJ_DIR)/ext_init.o
	echo "build successfully produced $(LIB_DIR)/$(STATIC_LIB_OUT) library."

	printf "#last build: static_lib\n$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(OUT_PROG_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) -L$(LIB_DIR) -l$(LIB_NAME) $(LIB_LINK_ARGS)\necho \"run target successfullly produced output file $(OUT_PROG_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)



#dev/constant lib source code modification builds


dev_f32: SOURCE_FILES += metalerp/core/sources/initializations.c metalerp/core/sources/externals/externals_init.c metalerp/auxiliary/sources/test_utils.c
dev_f32: CC_ARGS += -g
dev_f32: CUDACC_ARGS += -g
dev_f32:
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/core/include/metalerpDefs.h or metalerp/auxiliary/metalerpTest.h at the top of $(MAIN_FILE), and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/CUmetalerp.o metalerp/core/sources/initializations.cu
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(DEV_OUT_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) $(OBJ_DIR)/CUmetalerp.o $(LIB_LINK_ARGS)
	echo "dev build target sucessfully produced the $(DEV_OUT_DEFAULT) output file"

	printf "#last build: dev build\n\necho \"nothing to do, just run your program: $(DEV_OUT_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

dev_f32_release: SOURCE_FILES += metalerp/core/sources/initializations.c metalerp/core/sources/externals/externals_init.c metalerp/auxiliary/sources/test_utils.c
dev_f32_release: CC_ARGS += -g
dev_f32_release: CUDACC_ARGS += -g
dev_f32_release: MACRO_DEF_ARGS += -DMETALERP_RELEASE
dev_f32_release:
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/core/include/metalerpDefs.h or metalerp/auxiliary/metalerpTest.h at the top of $(MAIN_FILE), and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/CUmetalerp.o metalerp/core/sources/initializations.cu
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(DEV_OUT_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) $(OBJ_DIR)/CUmetalerp.o $(LIB_LINK_ARGS)
	echo "dev build target sucessfully produced the $(DEV_OUT_DEFAULT) output file"

	printf "#last build: dev build\n\necho \"nothing to do, just run your program: $(DEV_OUT_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

dev_f32_fast: SOURCE_FILES += metalerp/core/sources/initializations.c metalerp/core/sources/externals/externals_init.c metalerp/auxiliary/sources/test_utils.c
dev_f32_fast: CC_ARGS += -g
dev_f32_fast: CUDACC_ARGS += -g
dev_f32_fast: MACRO_DEF_ARGS += -DMETALERP_FAST
dev_f32_fast:
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/core/include/metalerpDefs.h or metalerp/auxiliary/metalerpTest.h at the top of $(MAIN_FILE), and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/CUmetalerp.o metalerp/core/sources/initializations.cu
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(DEV_OUT_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) $(OBJ_DIR)/CUmetalerp.o $(LIB_LINK_ARGS)
	echo "dev build target sucessfully produced the $(DEV_OUT_DEFAULT) output file"

	printf "#last build: dev build\n\necho \"nothing to do, just run your program: $(DEV_OUT_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

dev_f64: SOURCE_FILES += metalerp/core/sources/initializations.c metalerp/core/sources/externals/externals_init.c metalerp/auxiliary/sources/test_utils.c
dev_f64: CC_ARGS += -g
dev_f64: CUDACC_ARGS += -g
dev_f64: MACRO_DEF_ARGS += -DTYPE_FLOAT64
dev_f64:
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/core/include/metalerpDefs.h or metalerp/auxiliary/metalerpTest.h at the top of $(MAIN_FILE), and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/CUmetalerp.o metalerp/core/sources/initializations.cu
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(DEV_OUT_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) $(OBJ_DIR)/CUmetalerp.o $(LIB_LINK_ARGS)
	echo "dev build target sucessfully produced the $(DEV_OUT_DEFAULT) output file"

	printf "#last build: dev build\n\necho \"nothing to do, just run your program: $(DEV_OUT_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)

dev_f64_release: SOURCE_FILES += metalerp/core/sources/initializations.c metalerp/core/sources/externals/externals_init.c metalerp/auxiliary/sources/test_utils.c
dev_f64_release: CC_ARGS += -g
dev_f64_release: CUDACC_ARGS += -g
dev_f64_release: MACRO_DEF_ARGS += -DTYPE_FLOAT64 -DMETALERP_RELEASE
dev_f64_release:
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/core/include/metalerpDefs.h or metalerp/auxiliary/metalerpTest.h at the top of $(MAIN_FILE), and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/CUmetalerp.o metalerp/core/sources/initializations.cu
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(DEV_OUT_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) $(OBJ_DIR)/CUmetalerp.o $(LIB_LINK_ARGS)
	echo "dev build target sucessfully produced the $(DEV_OUT_DEFAULT) output file"

	printf "#last build: dev build\n\necho \"nothing to do, just run your program: $(DEV_OUT_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)


dev_f64_fast: SOURCE_FILES += metalerp/core/sources/initializations.c metalerp/core/sources/externals/externals_init.c metalerp/auxiliary/sources/test_utils.c
dev_f64_fast: CC_ARGS += -g
dev_f64_fast: CUDACC_ARGS += -g
dev_f64_fast: MACRO_DEF_ARGS += -DTYPE_FLOAT64 -DMETALERP_FAST
dev_f64_fast:
	make create
	echo "NOTE: if you haven't, make sure you have included metalerp/core/include/metalerpDefs.h or metalerp/auxiliary/metalerpTest.h at the top of $(MAIN_FILE), and put METALERP_INIT at the beginning of the main function."
	$(CUDACC) $(MACRO_DEF_ARGS) $(CUDACC_ARGS) -c -o $(OBJ_DIR)/CUmetalerp.o metalerp/core/sources/initializations.cu
	$(CC) $(MACRO_DEF_ARGS) $(CC_ARGS) -o $(DEV_OUT_DEFAULT) $(MAIN_FILE) $(SOURCE_FILES) $(OBJ_DIR)/CUmetalerp.o $(LIB_LINK_ARGS)
	echo "dev build target sucessfully produced the $(DEV_OUT_DEFAULT) output file"

	printf "#last build: dev build\n\necho \"nothing to do, just run your program: $(DEV_OUT_DEFAULT).\"\n" > $(BIN_DIR)/$(RUN_FILE)
	chmod u+x $(BIN_DIR)/$(RUN_FILE)


clean:
	-rm -rf $(OBJ_DIR)
	-rm -rf $(LIB_DIR)
	-rm -rf $(BIN_DIR)
	-rm -f $(OUT_PROG_DEFAULT)
	-rm -f $(DEV_OUT_DEFAULT)

create:
	-mkdir -p $(OBJ_DIR)
	-mkdir -p $(LIB_DIR)
	-mkdir -p $(BIN_DIR)
